package main

/*
剑指 Offer 10- II. 青蛙跳台阶问题
一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶。求该青蛙跳上一个 n 级的台阶总共有多少种跳法。

答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。

示例 1：

输入：n = 2
输出：2
示例 2：

输入：n = 7
输出：21
示例 3：

输入：n = 0
输出：1
提示：

0 <= n <= 100
*/
// 动态规划 青蛙跳台阶的跳法
// 解题思路，本质上等价于斐波那切数列 :
// 	f(0) = 1, f(1) = 1, f(n) = f(n-2)+f(n-1)
// 总结：最大一步走多少就用多大的数组做缓存
func numWays(n int) int {
	if n <= 1 {
		return 1
	}

	const mod int = 1e9 + 7
	bp := [2]int{1, 1}
	for i := 2; i <= n; i++ {
		bp[0], bp[1] = bp[1], (bp[0]+bp[1])%mod
	}

	return bp[1]
}
